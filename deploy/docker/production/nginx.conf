# Production nginx setup
# Adapted from ENCODE, https://gist.github.com/denji/8359866 and https://www.digitalocean.com/community/tools/nginx

error_log  /var/log/nginx/error.log warn;
worker_processes 4;

events {
    worker_connections  1024;
    use epoll;
}
http {
    resolver 8.8.8.8;
    include mime.types;

    # cache information about FDs, might need tuning
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # We get access_log from the LB
    access_log off;

    # Some additional optimizations
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;

    # Allow large POST requests
    client_body_buffer_size 128K;
    client_header_buffer_size 1k;
    client_max_body_size 16M;
    large_client_header_buffers 4 4k;
    request_pool_size 32k;
    output_buffers 4 32k;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 15;

    # enable gzip
    gzip            on;
    gzip_vary       on;
    gzip_proxied    any;
    gzip_min_length 1000;
    gzip_comp_level 3;
    gzip_buffers  16 8k;
    gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

    upstream app {
        server 0.0.0.0:6543;
        keepalive 32;
    }

    # Give Nginx a cache
    proxy_cache_path /data/nginx/cache keys_zone=fourfront:128m inactive=1d;
    proxy_cache fourfront;
    proxy_cache_key "$host$request_uri$http_authorization";
    proxy_cache_valid 301 302 1h;
    proxy_cache_valid 404 10m;
    add_header X-Cache-Status $upstream_cache_status;

    # Pass basic auth
    proxy_set_header HTTP_AUTHORIZATION $http_authorization;

    server {
        listen 8000;
        port_in_redirect off;

        # security headers
        add_header X-XSS-Protection        "1; mode=block" always;
        add_header X-Content-Type-Options  "nosniff" always;
        add_header Referrer-Policy         "no-referrer-when-downgrade" always;
        add_header Permissions-Policy      "interest-cohort=()" always;

        location / {
            # Normalize duplicate slashes
            if ($request ~ ^(GET|HEAD)\s([^?]*)//(.*)\sHTTP/[0-9.]+$) {
                return 301 $2/$3;
            }
            proxy_set_header  Host  $http_host;
            proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header  Connection  "";

            # "ifs are evil" except for when you need them
            # the below code is a "hack" for doing "if cond1 AND cond2" - Will Oct 14 21
            # if we are a *.4dnucleome.org host
            set $is_https_host "";
            if ($host ~* (.*\.4dnucleome\.org)) {
                set $is_https_host YE;
            }

            # if we are not using HTTP
            if ($http_x_forwarded_proto != "https") {
                set $is_https_host "${is_https_host}S";
            }

            # if we are a cgap*.hms.harvard.edu host and not using HTTPS
            # redirect to HTTPS
            if ($is_https_host = YES) {
                return 301 https://$host$request_uri;
            }

            # otherwise pass as normal
            proxy_pass http://app;
        }
        location ~ ^/_proxy/(.*)$ {
            internal;
            proxy_set_header Authorization "";
            proxy_set_header Content-Type "";
            proxy_buffering off;
            proxy_pass $1$is_args$args;
        }
    }
}
