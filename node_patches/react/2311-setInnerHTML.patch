diff --git a/src/browser/ui/dom/DOMChildrenOperations.js b/src/browser/ui/dom/DOMChildrenOperations.js
index 0a566e5..e3cc1d4 100644
--- a/lib/DOMChildrenOperations.js
+++ b/lib/DOMChildrenOperations.js
@@ -64,13 +64,31 @@ if (textContentAccessor === 'textContent') {
    * @param {string} text New text content
    */
   updateTextContent = function(node, text) {
+    var doc;
+    // Avoid manipulating child nodes of `script`, `style` and `title` as
+    // IE8 throws 'Unknown runtime error'.
+    switch (node.tagName) {
+      case 'SCRIPT':
+        node.text = text;
+        return;
+      case 'TITLE':
+        doc = node.ownerDocument || document;
+        doc.title = text;
+        return;
+      case 'STYLE':
+        // Non-standard IE property
+        if ('styleSheet' in node) {
+          node.styleSheet.cssText = text;
+          return;
+        }
+    }
     // In order to preserve newlines correctly, we can't use .innerText to set
     // the contents (see #1080), so we empty the element then append a text node
     while (node.firstChild) {
       node.removeChild(node.firstChild);
     }
     if (text) {
-      var doc = node.ownerDocument || document;
+      doc = node.ownerDocument || document;
       node.appendChild(doc.createTextNode(text));
     }
   };
diff --git a/src/browser/ui/dom/setInnerHTML.js b/src/browser/ui/dom/setInnerHTML.js
index f01481a..67259c0 100644
--- a/lib/setInnerHTML.js
+++ b/lib/setInnerHTML.js
@@ -38,7 +38,28 @@ if (ExecutionEnvironment.canUseDOM) {
   var testElement = document.createElement('div');
   testElement.innerHTML = ' ';
   if (testElement.innerHTML === '') {
+    var decoderElement = document.createElement('textarea');
     setInnerHTML = function(node, html) {
+      // Avoid manipulating child nodes of `script`, `style` and `title` as
+      // IE8 throws 'Unknown runtime error'.
+      switch (node.tagName) {
+        case 'SCRIPT':
+          node.text = html;
+          return;
+        case 'TITLE':
+          // As `title` is not a raw text element, entities musst be decoded.
+          // Safely parse using a textarea node.
+          var doc = node.ownerDocument || document;
+          decoderElement.innerHTML = html;
+          doc.title = decoderElement.value;
+          return;
+        case 'STYLE':
+          if ('styleSheet' in node) {
+            node.styleSheet.cssText = html;
+            return;
+          }
+      }
+
       // Magic theory: IE8 supposedly differentiates between added and updated
       // nodes when processing innerHTML, innerHTML on updated nodes suffers
       // from worse whitespace behavior. Re-adding a node like this triggers
