files:
  "/opt/elasticbeanstalk/local/override_wsgi_conf.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python
      # This file creates a Python script that runs on appdeploy and configdeploy
      # pre hooks to override the WSGI config file
      # See https://forums.aws.amazon.com/thread.jspa?threadID=163369

      import os
      import sys
      sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
      import config

      # remove old wsgi hooks and config files
      old_wsgi_hooks_conf = [
          '/opt/elasticbeanstalk/hooks/configdeploy/pre/99patchwsgi.py',
          '/opt/elasticbeanstalk/hooks/appdeploy/pre/99patchwsgi.py',
          '/etc/httpd/conf.d/encoded-apache.conf',
          '/etc/httpd/wsgi.conf.d/extra_config.conf'
      ]
      for old_wsgi_file in old_wsgi_hooks_conf:
          if os.path.exists(old_wsgi_file):
              os.remove(old_wsgi_file)
          else:
              print("File %s does not exist, so needn't be deleted." % old_wsgi_file)

      MY_APACHE_TEMPLATE = '''
      # Customized wsgi.conf.  If you're seeing this, good!

      # No need to load modules/mod_wsgi.so, since it's already loaded here:
      # /etc/httpd/conf.modules.d/10-wsgi.conf

      WSGIPythonHome /opt/python/run/baselinenv
      WSGISocketPrefix run/wsgi
      WSGIRestrictEmbedded On
      WSGIPassAuthorization On

      ### START originally in encoded-apache.conf
      LogLevel info

      <Directory /opt/python/current/app/parts/production-indexer>
          Order deny,allow
          Allow from all
          <IfModule access_compat_module>
              Require all granted
          </IfModule>
      </Directory>

      <Directory /opt/python/current/app/parts/production>
          Order deny,allow
          Allow from all
          <IfModule access_compat_module>
              Require all granted
          </IfModule>
          # Limit upload size to 500 MB (375MB before base64 encoding)
          LimitRequestBody 524288000
          # Apache adds -gzip to outgoing ETag in mod_deflate, remove inbound.
          # https://issues.apache.org/bugzilla/show_bug.cgi?id=39727
          RequestHeader edit If-Match    -gzip\"$    \"
          RequestHeader edit If-None-Match    -gzip\"$    \"
      </Directory>

      # Serve static resources directly from Apache
      Alias /favicon.ico /opt/python/current/app/src/encoded/static/img/favicon.ico

      # Compress JSON responses.
      AddOutputFilterByType DEFLATE application/javascript application/json text/css text/html text/javascript

      # Source map type (to enable compression)
      <FilesMatch \.js\.map$>
          ForceType application/json
      </FilesMatch>

      RewriteEngine On

      # Proxy internal redirects for file downloads
      SSLProxyEngine On
      RewriteCond %{ENV:REDIRECT_STATUS} .
      RewriteRule ^/_proxy/(.+)$  $1  [proxy]

      # Redirect http to https from the load balancer
      # https://stackoverflow.com/a/38751749
      <If "-n '%{HTTP:X-Forwarded-Proto}' && %{HTTP:X-Forwarded-Proto} != 'https'">
         RewriteCond %{HTTP_HOST} ^(data\.4dnucleome\.org|testportal\.4dnucleome\.org)$
         RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [redirect=permanent,last,qsappend]
      </If>
      ### END originally in encoded-apache.conf

      <VirtualHost *:80>

      # force use of main Python interpreter
      WSGIApplicationGroup %{GLOBAL}

      ### START originally in /etc/httpd/wsgi.conf.d/extra_config.conf
      Header always set Access-Control-Allow-Origin "*"
      Header always set Access-Control-Allow-Methods "GET, HEAD, OPTIONS"
      Header always set Access-Control-Allow-Headers "Accept, Origin, Range, X-Requested-With"
      Header always set Access-Control-Expose-Headers: "Content-Length, Content-Range, Content-Type"
      RewriteCond %{REQUEST_METHOD} OPTIONS
      RewriteRule ^ - [redirect=200,last]

      # Indexer. Configure first to avoid catchall '/'
      # Use default number of processes=1, so this is not a multiprocess daemon
      WSGIDaemonProcess encoded-indexer user=wsgi group=wsgi threads=1 python-path=/opt/python/current/app:/opt/python/run/venv/lib64/python3.6/site-packages:/opt/python/run/venv/lib/python3.6/site-packages display-name=encoded-indexer
      WSGIScriptAlias /_indexer /opt/python/current/app/parts/production-indexer/wsgi process-group=encoded-indexer application-group=%{GLOBAL}

      # https://github.com/GrahamDumpleton/mod_wsgi/issues/2
      # Try Graham Dumpleton's fix since we have upgraded WSGI
      # Original fix (next 3 lines)
      # SetEnvIf Request_Method HEAD X_REQUEST_METHOD=HEAD
      # LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %{X-Stats}o&server_time=%D" vhost_combined_stats
      # ErrorLogFormat "%M"

      ### END originally in /etc/httpd/wsgi.conf.d/extra_config.conf

      Alias /static/ /opt/python/current/app/src/encoded/static/
      <Directory /opt/python/current/app/src/encoded/static/>
        Order allow,deny
        Allow from all
      </Directory>

      WSGIScriptAlias / /opt/python/current/app/parts/production/wsgi

      <Directory /opt/python/current/app/>
        Require all granted
      </Directory>

      # Customized WSGIDaemonProcess settings
      # https://modwsgi.readthedocs.io/en/latest/configuration-directives/WSGIDaemonProcess.html
      # Notes:
      # - might want to add "request-timeout", though it would interfere with long running requests
      # - "queue-timeout" should not occur since Apache servers match total WSGI threads. Set to value of Apache Timeout
      # - maybe use "restart-interval" than "maximum-requests", but handle long requests

      WSGIDaemonProcess wsgi processes=5 threads=4 display-name='%{GROUP}' python-path=/opt/python/current/app:/opt/python/run/venv/lib64/python3.6/site-packages:/opt/python/run/venv/lib/python3.6/site-packages user=wsgi group=wsgi home=/opt/python/current/app graceful-timeout=30 deadlock-timeout=60 queue-timeout=62 maximum-requests=1000
      WSGIProcessGroup wsgi
      </VirtualHost>
      '''


      def main():
          if 'EB_SYSTEM_STARTUP' in os.environ:
              return
          try:
              WSGI_STAGING_CONFIG = config.get_container_config('wsgi_staging_config')
              print("WSGI_STAGING_CONFIG=", WSGI_STAGING_CONFIG)
              open(WSGI_STAGING_CONFIG, 'w').write(MY_APACHE_TEMPLATE)
          except Exception, e:
              config.emit_error_event(config.USER_ERROR_MESSAGES['badappconfig'])
              config.diagnostic("Error generating config during configdeploy/pre: %s" % str(e))
              sys.exit(1)


      if __name__ == '__main__':
          config.configure_stdout_logger()
          main()

commands:
  01_app_deploy_dir:
    command: "mkdir -p /opt/elasticbeanstalk/hooks/appdeploy/pre"

  02_config_deploy_dir:
    command: "mkdir -p /opt/elasticbeanstalk/hooks/configdeploy/pre"

  03_app_deploy_file:
    command: "cp -p /opt/elasticbeanstalk/local/override_wsgi_conf.py /opt/elasticbeanstalk/hooks/appdeploy/pre/90_override_wsgi_conf.py"

  04_config_deploy_file:
    command: "cp -p /opt/elasticbeanstalk/local/override_wsgi_conf.py /opt/elasticbeanstalk/hooks/configdeploy/pre/90_override_wsgi_conf.py"
